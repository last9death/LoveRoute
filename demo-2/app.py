#!/usr/bin/env python3
"""
LoveRoutes - Romantic Travel Routes for Russia
Full-stack Python Flask application
"""

from flask import Flask, render_template, jsonify, request, session, redirect, url_for
import json
import os
import hashlib
import secrets
import uuid
from datetime import datetime

app = Flask(__name__)
app.secret_key = secrets.token_hex(32)

# In-memory databases
users_db = {}
choices_db = {}

# Sample data - exactly matching the main site structure
CITIES = [
    {"id": "msk", "name": "–ú–æ—Å–∫–≤–∞"},
    {"id": "spb", "name": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"}, 
    {"id": "nsk", "name": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"},
    {"id": "ekb", "name": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"},
    {"id": "kzn", "name": "–ö–∞–∑–∞–Ω—å"},
    {"id": "nnv", "name": "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥"},
    {"id": "chel", "name": "–ß–µ–ª—è–±–∏–Ω—Å–∫"},
    {"id": "smr", "name": "–°–∞–º–∞—Ä–∞"},
    {"id": "oms", "name": "–û–º—Å–∫"},
    {"id": "ros", "name": "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É"},
    {"id": "ufa", "name": "–£—Ñ–∞"},
    {"id": "krsk", "name": "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫"},
    {"id": "vor", "name": "–í–æ—Ä–æ–Ω–µ–∂"},
    {"id": "perm", "name": "–ü–µ—Ä–º—å"},
    {"id": "vol", "name": "–í–æ–ª–≥–æ–≥—Ä–∞–¥"},
    {"id": "krd", "name": "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"},
    {"id": "inn", "name": "–ò–Ω–Ω–æ–ø–æ–ª–∏—Å"},
    {"id": "tyum", "name": "–¢—é–º–µ–Ω—å"},
    {"id": "irk", "name": "–ò—Ä–∫—É—Ç—Å–∫"},
    {"id": "tol", "name": "–¢–æ–ª—å—è—Ç—Ç–∏"},
    {"id": "uly", "name": "–£–ª—å—è–Ω–æ–≤—Å–∫"}
]

# Load places data from JSON (same structure as main site)
def load_places_data():
    """Load places data from a simplified JSON structure"""
    sample_places = []
    
    # Sample romantic places for each city
    place_templates = [
        {"name": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ä–∫", "excerpt": "–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ —Å—Ä–µ–¥–∏ –∑–µ–ª–µ–Ω–∏", "tags": ["–ø—Ä–∏—Ä–æ–¥–∞", "–ø—Ä–æ–≥—É–ª–∫–∏"]},
        {"name": "–ù–∞–±–µ—Ä–µ–∂–Ω–∞—è", "excerpt": "–ö—Ä–∞—Å–∏–≤—ã–µ –≤–∏–¥—ã –Ω–∞ –≤–æ–¥—É", "tags": ["–≤–æ–¥–∞", "–∑–∞–∫–∞—Ç"]},
        {"name": "–°—Ç–∞—Ä—ã–π –≥–æ—Ä–æ–¥", "excerpt": "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞", "tags": ["–∏—Å—Ç–æ—Ä–∏—è", "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞"]},
        {"name": "–°–º–æ—Ç—Ä–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞", "excerpt": "–ü–∞–Ω–æ—Ä–∞–º–Ω—ã–π –≤–∏–¥ –Ω–∞ –≥–æ—Ä–æ–¥", "tags": ["–≤–∏–¥—ã", "—Ñ–æ—Ç–æ"]},
        {"name": "–ë–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∏–π —Å–∞–¥", "excerpt": "–£–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∞–ª–ª–µ–∏ –∏ —Ü–≤–µ—Ç—ã", "tags": ["–ø—Ä–∏—Ä–æ–¥–∞", "—Ü–≤–µ—Ç—ã"]},
        {"name": "–ö–∞—Ñ–µ –Ω–∞ –∫—Ä—ã—à–µ", "excerpt": "–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —É–∂–∏–Ω—ã –ø–æ–¥ –∑–≤–µ–∑–¥–∞–º–∏", "tags": ["–µ–¥–∞", "–∞—Ç–º–æ—Å—Ñ–µ—Ä–∞"]},
        {"name": "–¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å", "excerpt": "–ö—É–ª—å—Ç—É—Ä–Ω—ã–π —Ü–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞", "tags": ["–∫—É–ª—å—Ç—É—Ä–∞", "—Ç–µ–∞—Ç—Ä"]},
        {"name": "–†–µ—á–Ω–æ–π –ø–æ—Ä—Ç", "excerpt": "–ü—Ä–æ–≥—É–ª–∫–∏ –Ω–∞ —Ç–µ–ø–ª–æ—Ö–æ–¥–µ", "tags": ["–≤–æ–¥–∞", "–ø—Ä–æ–≥—É–ª–∫–∞"]},
        {"name": "–ü–∞—Ä–∫ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π", "excerpt": "–í–µ—Å–µ–ª—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –≤–¥–≤–æ–µ–º", "tags": ["—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–∞–¥—Ä–µ–Ω–∞–ª–∏–Ω"]},
        {"name": "–í–∏–Ω–Ω—ã–π –±–∞—Ä", "excerpt": "–£—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –¥–ª—è –¥–≤–æ–∏—Ö", "tags": ["–∞–ª–∫–æ–≥–æ–ª—å", "—É—é—Ç"]},
        {"name": "–ê—Ä—Ç-–≥–∞–ª–µ—Ä–µ—è", "excerpt": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ", "tags": ["–∏—Å–∫—É—Å—Å—Ç–≤–æ", "–∫—É–ª—å—Ç—É—Ä–∞"]},
        {"name": "–°–ø–∞-—Ü–µ–Ω—Ç—Ä", "excerpt": "–†–µ–ª–∞–∫—Å–∞—Ü–∏—è –∏ —Ä–æ–º–∞–Ω—Ç–∏–∫–∞", "tags": ["—Ä–µ–ª–∞–∫—Å", "—Å–ø–∞"]},
        {"name": "–†–µ—Å—Ç–æ—Ä–∞–Ω", "excerpt": "–ò–∑—ã—Å–∫–∞–Ω–Ω–∞—è –∫—É—Ö–Ω—è", "tags": ["–µ–¥–∞", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω"]},
        {"name": "–ú—É–∑–µ–π", "excerpt": "–ü–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏", "tags": ["–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–∏—Å—Ç–æ—Ä–∏—è"]},
        {"name": "–ü–ª—è–∂", "excerpt": "–ü–µ—Å–æ–∫ –∏ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–∫–∞—Ç—ã", "tags": ["–ø–ª—è–∂", "–∑–∞–∫–∞—Ç"]},
        {"name": "–ú–æ—Å—Ç", "excerpt": "–°–∏–º–≤–æ–ª –ª—é–±–≤–∏ –∏ –≤–µ—Ä–Ω–æ—Å—Ç–∏", "tags": ["—Å–∏–º–≤–æ–ª", "–≤–∏–¥—ã"]},
        {"name": "–•—Ä–∞–º", "excerpt": "–î—É—Ö–æ–≤–Ω–æ–µ –µ–¥–∏–Ω–µ–Ω–∏–µ", "tags": ["—Ä–µ–ª–∏–≥–∏—è", "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞"]},
        {"name": "–†—ã–Ω–æ–∫", "excerpt": "–ú–µ—Å—Ç–Ω—ã–π –∫–æ–ª–æ—Ä–∏—Ç –∏ –≤–∫—É—Å—ã", "tags": ["–µ–¥–∞", "—Ç—Ä–∞–¥–∏—Ü–∏–∏"]},
        {"name": "–ü–∞—Ä–∫ –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–æ–≤", "excerpt": "–î–µ—Ç—Å–∫–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–º–µ—Å—Ç–µ", "tags": ["—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–Ω–æ—Å—Ç–∞–ª—å–≥–∏—è"]},
        {"name": "–ü–ª–∞–Ω–µ—Ç–∞—Ä–∏–π", "excerpt": "–ó–≤–µ–∑–¥—ã –¥–ª—è –≤–ª—é–±–ª–µ–Ω–Ω—ã—Ö", "tags": ["–Ω–∞—É–∫–∞", "—Ä–æ–º–∞–Ω—Ç–∏–∫–∞"]}
    ]
    
    # Generate 20 places for each city
    for city in CITIES:
        for i, template in enumerate(place_templates):
            place = {
                "id": f"{city['id']}-{template['name'].lower().replace(' ', '-')}-{i+1}",
                "cityId": city["id"],
                "name": template["name"],
                "excerpt": template["excerpt"],
                "image_url": f"/static/images/{city['id']}/{city['id']}-place-{i+1}.jpg",
                "verified_image": True,
                "image_attribution": "Wikimedia Commons",
                "tags": template["tags"]
            }
            sample_places.append(place)
    
    return sample_places

PLACES = load_places_data()

@app.route('/')
def index():
    """Main page"""
    return render_template('index.html', cities=CITIES)

@app.route('/api/cities')
def get_cities():
    """Get all cities"""
    return jsonify(CITIES)

@app.route('/api/places')
def get_places():
    """Get places for a specific city"""
    city_id = request.args.get('cityId')
    if not city_id:
        return jsonify([])
    
    city_places = [place for place in PLACES if place['cityId'] == city_id]
    return jsonify(city_places)

@app.route('/api/register', methods=['POST'])
def register():
    """User registration"""
    data = request.get_json()
    
    # Validation
    required_fields = ['email', 'password', 'firstName', 'selectedCity']
    for field in required_fields:
        if not data.get(field):
            return jsonify({'message': f'–ü–æ–ª–µ {field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'}), 400
    
    email = data['email'].lower().strip()
    
    if email in users_db:
        return jsonify({'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}), 400
    
    if len(data['password']) < 6:
        return jsonify({'message': '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤'}), 400
    
    # Create user
    user_id = str(uuid.uuid4())
    password_hash = hashlib.sha256(data['password'].encode()).hexdigest()
    
    user = {
        'id': user_id,
        'email': email,
        'firstName': data['firstName'],
        'lastName': data.get('lastName', ''),
        'selectedCity': data['selectedCity'],
        'password': password_hash,
        'createdAt': datetime.now().isoformat(),
        'updatedAt': datetime.now().isoformat()
    }
    
    users_db[email] = user
    session['user_id'] = user_id
    session['email'] = email
    
    # Return user without password
    user_response = {k: v for k, v in user.items() if k != 'password'}
    
    return jsonify({
        'user': user_response,
        'token': f'jwt_token_{user_id}'  # Mock JWT token
    }), 201

@app.route('/api/login', methods=['POST'])
def login():
    """User login"""
    data = request.get_json()
    
    email = data.get('email', '').lower().strip()
    password = data.get('password', '')
    
    if not email or not password:
        return jsonify({'message': 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400
    
    user = users_db.get(email)
    if not user:
        return jsonify({'message': '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'}), 401
    
    password_hash = hashlib.sha256(password.encode()).hexdigest()
    if user['password'] != password_hash:
        return jsonify({'message': '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'}), 401
    
    session['user_id'] = user['id']
    session['email'] = email
    
    user_response = {k: v for k, v in user.items() if k != 'password'}
    
    return jsonify({
        'user': user_response,
        'token': f'jwt_token_{user["id"]}'
    })

@app.route('/api/auth/current-user')
def get_current_user():
    """Get current authenticated user"""
    email = session.get('email')
    if not email or email not in users_db:
        return jsonify({'message': 'Unauthorized'}), 401
    
    user = users_db[email]
    user_response = {k: v for k, v in user.items() if k != 'password'}
    
    return jsonify(user_response)

@app.route('/api/logout', methods=['POST'])
def logout():
    """User logout"""
    session.clear()
    return jsonify({'message': 'Logged out successfully'})

@app.route('/api/choices', methods=['POST'])
def record_choice():
    """Record user's choice (like/skip)"""
    data = request.get_json()
    user_id = session.get('user_id')
    
    if not user_id:
        return jsonify({'message': 'Unauthorized'}), 401
    
    choice_id = str(uuid.uuid4())
    choice = {
        'id': choice_id,
        'userId': user_id,
        'placeId': data.get('placeId'),
        'cityId': data.get('cityId'), 
        'choice': data.get('choice'),  # 'like' or 'skip'
        'timestamp': datetime.now().isoformat()
    }
    
    choices_db[choice_id] = choice
    
    return jsonify({'success': True, 'message': 'Choice recorded'})

@app.route('/api/user/choices')
def get_user_choices():
    """Get user's choices"""
    user_id = session.get('user_id')
    if not user_id:
        return jsonify({'message': 'Unauthorized'}), 401
    
    user_choices = [choice for choice in choices_db.values() if choice['userId'] == user_id]
    return jsonify(user_choices)

if __name__ == '__main__':
    print("\nüöÄ LoveRoutes - Python Flask Server")
    print("üì± –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ: http://localhost:8000")
    print("üíï –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ –†–æ—Å—Å–∏–∏")
    print("\n–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    print("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    print("‚úÖ –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –∏–∑ 21 –≥–æ—Ä–æ–¥–∞ –†–æ—Å—Å–∏–∏") 
    print("‚úÖ Swipe-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç")
    print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print("‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω")
    
    app.run(host='0.0.0.0', port=8000, debug=True)